name: WLED compile

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tooling (pip, PlatformIO, jq, unzip)
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Resolve latest WLED tag
        run: |
          LATEST_TAG="$(curl -s https://api.github.com/repos/Aircoookie/WLED/releases/latest | jq -r .tag_name)"
          echo "WLED_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"

      - name: Fetch WLED sources (latest)
        run: |
          rm -rf /tmp/WLEDtemp || true
          mkdir -p /tmp/WLEDtemp
          echo "Downloading WLED tag: ${WLED_TAG}"
          curl -L "https://api.github.com/repos/Aircoookie/WLED/zipball/${WLED_TAG}" -o /tmp/WLEDtemp/wled.zip
          unzip -q /tmp/WLEDtemp/wled.zip -d /tmp/WLEDtemp
          find /tmp/WLEDtemp -maxdepth 1 -mindepth 1 -type d | head -n1 > /tmp/WLEDtemp/wledfoldername

      - name: Build custom env with PlatformIO
        run: |
          cd "$(cat /tmp/WLEDtemp/wledfoldername)"
          npm ci || npm install
          {
            echo ''
            echo '[env:custom_build]'
            echo 'extends = env:esp32c3dev'
            echo 'build_flags = ${env:esp32c3dev.build_flags} -D BTNPIN=8 -D ARDUINO_USB_CDC_ON_BOOT=0'
            echo 'build_unflags = -D WLED_RELEASE_NAME'
          } >> platformio.ini
          pio run -e custom_build

      - name: Collect artifacts (bin + bootloader + partitions + flasher .bat)
        run: |
          REPO_ROOT="$GITHUB_WORKSPACE"
          SRC_DIR="$(cat /tmp/WLEDtemp/wledfoldername)"

          # Ścieżki wyjściowe PIO
          ENV_DIR="${SRC_DIR}/.pio/build/custom_build"
          FW_DIR="${SRC_DIR}/build_output/firmware"

          # Usuń stare biny
          rm -f "$REPO_ROOT"/*.bin "$REPO_ROOT"/flash_wled_c3.bat || true

          # Skopiuj firmware (app)
          if [ -f "${FW_DIR}/custom_build.bin" ]; then
            cp "${FW_DIR}/custom_build.bin" "$REPO_ROOT/"
          else
            # fallback gdy build_output nie istnieje
            cp "${ENV_DIR}/firmware.bin" "$REPO_ROOT/custom_build.bin"
          fi

          # Skopiuj bootloader i partitions z katalogu .pio
          cp "${ENV_DIR}/bootloader.bin" "$REPO_ROOT/"
          cp "${ENV_DIR}/partitions.bin" "$REPO_ROOT/"

          # Zapisz datę i wersję
          echo -n "$(date -I)" > "$REPO_ROOT/last_update_date.txt"
          echo -n "${WLED_TAG}" > "$REPO_ROOT/wled_version.txt"

          # Skrypt flashujący dla Windows (ESP32-C3)
          cat > "$REPO_ROOT/flash_wled_c3.bat" << 'BAT'
@echo off
setlocal ENABLEDELAYEDEXPANSION
python -m esptool -encrypt 0x0 --chip esp32c3 --baud 921600 --before default_reset --after hard_reset ^
  write_flash -z ^
  0x0000 bootloader.bin ^
  0x8000 partitions.bin ^
  0x10000 custom_build.bin

if %ERRORLEVEL% NEQ 0 (
  echo.
  echo [!] Blad flashowania (sprawdz sterowniki/PORT/tryb boot).
  pause
  exit /b 1
)

echo.
echo [OK] Wgrano firmware. Urzadzenie resetuje sie.
pause
BAT

      - name: Commit artifacts
        run: |
          cd "$GITHUB_WORKSPACE"
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add custom_build.bin bootloader.bin partitions.bin flash_wled_c3.bat last_update_date.txt wled_version.txt
          git commit -m "WLED ${WLED_TAG}: add app + bootloader + partitions + flash script"
          git push origin HEAD:main
